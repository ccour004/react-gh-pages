{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","console","log","window","location","hash","includes","axios","get","split","then","res","response","data","setState","items","map","item","react_default","a","createElement","title","href","baseURL","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRA2CeA,qBAtCf,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACVE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACRQ,MAAQ,GAFIP,mFAKG,IAAAQ,EAAAL,KACbM,QAAQC,IAAIC,OAAOC,SAASC,MACzBF,OAAOC,SAASC,KAAKC,SAAS,MACvCC,IAAMC,IAAI,0DAA0DL,OAAOC,SAASC,KAAKI,MAAM,KAAK,GAAGA,MAAM,KAAK,IACjHC,KAAK,SAAAC,GACF,IAAMC,EAAWD,EAAIE,KACrBb,EAAKc,SAAS,CAACF,yFAgBjB,GADJX,QAAQC,IAAIP,KAAKI,MAAMa,UAChBjB,KAAKI,MAAMa,UAAYjB,KAAKI,MAAMa,SAASG,MAAM,CAChD,IAAIA,EAAQpB,KAAKI,MAAMa,SAASG,MAAMC,IAAI,SAACC,GAAD,OAAUC,EAAAC,EAAAC,cAAA,UAAKH,EAAKI,SAC9D,OAAOH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAKL,IAErB,OACEG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGE,KATKC,8RASR,mBAlCUC,cCQEC,QACW,cAA7BtB,OAAOC,SAASsB,UAEe,UAA7BvB,OAAOC,SAASsB,UAEhBvB,OAAOC,SAASsB,SAASC,MACvB,2DCZNC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.dc4b55a3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\nconstructor(props){\n        super(props);\n\tthis.state = {};\n}\n\n  componentDidMount(){\n        console.log(window.location.hash);\n        if(window.location.hash.includes('#')){\n\t\taxios.get(\"https://www.googleapis.com/drive/v2/files?access_token=\"+window.location.hash.split('&')[0].split('=')[1])\n\t\t.then(res =>{\n\t\t    const response = res.data;\n\t\t    this.setState({response});\n\t\t});\n\t}\n  }\n\n  parseResponse(){\n  }\n\n  render() {\nconst baseURL = \"https://accounts.google.com/o/oauth2/v2/auth\",\n\tscope = \"https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.metadata.readonly\",\n\tredirect_uri = \"http://localhost:3000\",\n\tresponse_type = \"token\", client_id = \"219412377030-f3vst5pe2d1srk8b6tjeaocdai04bfkf.apps.googleusercontent.com\",\n\tsign_in_page = baseURL+'?scope='+scope+\"&include_granted_scopes=true&redirect_uri=\"+redirect_uri+\"&response_type=\"+response_type+\"&client_id=\"+client_id;\n\nconsole.log(this.state.response);\n    if(this.state.response && this.state.response.items){\n        var items = this.state.response.items.map((item) => <li>{item.title}</li>);\n        return <div><ul>{items}</ul></div>;\n    }\n    return (\n      <div>\n        <a href={sign_in_page}>Sign in</a>\n     </div>);\n  }\n}\n\nexport default App;\n\n/*\nhttps://accounts.google.com/o/oauth2/v2/auth?\n scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.metadata.readonly&\n include_granted_scopes=true&\n state=state_parameter_passthrough_value&\n redirect_uri=\thttp://localhost:3000&\n response_type=token&\n client_id=219412377030-f3vst5pe2d1srk8b6tjeaocdai04bfkf.apps.googleusercontent.com\n*/\n\n/*EXAMPLE RESPONSE:\n\nhttp://localhost:3000/#state=state_parameter_passthrough_value&access_token=ya29.GluaBm2hZrZpMGSO7VyRaRBGP4Olx6Y2ae72RaBs017ZZdPioQ5t80GHCk4n2NOz8NEpmjor8D41_rJ460nr6xC_6_cvre_ExZ6VIZTX2zZMOJHp9_asfbelBkGJ&token_type=Bearer&expires_in=3600&scope=openid%20email%20https://www.googleapis.com/auth/plus.me%20https://www.googleapis.com/auth/userinfo.email%20https://www.googleapis.com/auth/drive.metadata.readonly\n\nEXAMPLE API CALL:\nhttps://www.googleapis.com/drive/v2/files?access_token=ya29.GluaBm2hZrZpMGSO7VyRaRBGP4Olx6Y2ae72RaBs017ZZdPioQ5t80GHCk4n2NOz8NEpmjor8D41_rJ460nr6xC_6_cvre_ExZ6VIZTX2zZMOJHp9_asfbelBkGJ\n\n\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}